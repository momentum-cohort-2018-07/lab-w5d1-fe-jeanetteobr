{"version":3,"sources":["script.js"],"names":["canvas","getID","screen","getContext","gameSize","x","width","y","height","colors","player","obstacles","coin","wall","wallMin","wallMax","Game","Player","Coin","tick","update","draw","window","requestAnimationFrame","clearRect","Wall","obstacle","filter","center","length","moveObstacles","collide","console","log","Math","floor","random","fillStyle","fillRect","strokeRect","entrySide","vx","vy","push","Obstacle","game","size","keyboarder","Keyboarder","isDown","KEYS","LEFT","RIGHT","DOWN","UP","pos","vel","velocity","sprite1","sprite2","id","document","getElementById","keyState","addEventListener","e","keyCode","bind","callback","S"],"mappings":"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","file":"script.c9fa4b40.map","sourceRoot":"..","sourcesContent":["\n// grabs canvas element from DOM\nconst canvas = getID('game')\n\n// gets the drawing context\nconst screen = canvas.getContext('2d')\n\n// notes the dimension of the game screen\nconst gameSize = {x: canvas.width, y: canvas.height}\n\n// notes the colors for all elements in the game\nconst colors = {\n  player: '#EAF2E3',\n  obstacles: '#857E7B',\n  screen: '#DB7F67',\n  coin: '#D6BA73',\n  wall: '#59344F'\n\n}\n\n// notes the size of the player's bounding box\nconst wallMin = 152\nconst wallMax = 318\n\n// creates and instance of the game\nclass Game {\n  constructor () {\n    this.player = new Player()\n    this.coin = new Coin()\n    this.obstacles = []\n    this.tick()\n  }\n  // animates the game\n  tick () {\n    this.update()\n    this.draw()\n    window.requestAnimationFrame(() => this.tick())\n  }\n  // draws the game\n  draw () {\n    screen.clearRect(0, 0, gameSize.x, gameSize.y)\n    this.Wall()\n    this.player.draw()\n    this.coin.draw()\n    for (let obstacle of this.obstacles) {\n      obstacle.draw()\n    }\n  }\n  // updates the game state\n  update () {\n    this.obstacles = this.obstacles.filter(function (obstacle) {\n      return obstacle.center.x >= 0 && obstacle.center.x <= gameSize.x &&\n      obstacle.center.y >= 0 && obstacle.center.y <= gameSize.y\n    })\n    while (this.obstacles.length < 3) {\n      this.moveObstacles()\n    }\n    this.coin.update()\n    this.player.update()\n    for (let obstacle of this.obstacles) {\n      obstacle.update()\n    }\n    if (collide(this.coin, this.player)) {\n      console.log('hit')\n      this.coin.center.x = Math.floor(Math.random() * 166) + wallMin\n      this.coin.center.y = Math.floor(Math.random() * 166) + wallMin\n    }\n  }\n  // draws a wall in middle of screen\n  Wall () {\n    screen.fillStyle = colors.screen\n    screen.fillRect(0, 0, gameSize.x, gameSize.y)\n    screen.strokeRect(150, 150, 200, 200)\n  }\n  moveObstacles () {\n    let entrySide = Math.floor(Math.random() * 4) + 1\n    let x, y, vx, vy\n\n    if (entrySide === 1) {\n      x = Math.floor(Math.random() * 4) * 60 + 210\n      y = 0\n      vx = 0\n      vy = 2\n    } else if (entrySide === 2) {\n      x = 0\n      y = Math.floor(Math.random() * 4) * 60 + 210\n      vx = 2\n      vy = 0\n    } else if (entrySide === 3) {\n      x = 500\n      y = Math.floor(Math.random() * 4) * 60 + 210\n      vx = -2\n      vy = 0\n    } else if (entrySide === 4) {\n      x = Math.floor(Math.random() * 4) * 60 + 210\n      y = 500\n      vx = 0\n      vy = -2\n    }\n    console.log(x, y, vx, vy)\n    this.obstacles.push(new Obstacle(this, {x: x, y: y}, {x: vx, y: vy}))\n  }\n}\n\n// creates the player sprite and dictates how it acts\nclass Player {\n  constructor (game) {\n    this.size = {\n      x: 30,\n      y: 30\n    }\n    this.center = {\n      x: gameSize.x / 2 - 15,\n      y: gameSize.y / 2 - 15\n    }\n    this.keyboarder = new Keyboarder()\n    this.game = game\n  }\n  // draws the player sprite\n  draw () {\n    screen.fillStyle = colors.player\n    screen.fillRect(this.center.x, this.center.y, this.size.x, this.size.y)\n  }\n  // updates the position of the player according the keyboard input\n  update () {\n    if (this.keyboarder.isDown(Keyboarder.KEYS.LEFT)) {\n      this.center.x -= 2\n      if (this.center.x <= wallMin) this.center.x = wallMin\n    }\n    if (this.keyboarder.isDown(Keyboarder.KEYS.RIGHT)) {\n      this.center.x += 2\n      if (this.center.x >= wallMax) this.center.x = wallMax\n    }\n    if (this.keyboarder.isDown(Keyboarder.KEYS.DOWN)) {\n      this.center.y += 2\n      if (this.center.y >= wallMax) this.center.y = wallMax\n    }\n    if (this.keyboarder.isDown(Keyboarder.KEYS.UP)) {\n      this.center.y -= 2\n      if (this.center.y <= wallMin) this.center.y = wallMin\n    }\n  }\n}\n\n// creates the coin sprite and dictacts how it acts\nclass Coin {\n  constructor (game) {\n    this.game = game\n    this.size = {\n      x: 25,\n      y: 25\n    }\n    // randomly places coin on canvas within the box in the middle of the canvas\n    this.center = {\n      x: Math.floor(Math.random() * 166) + wallMin,\n      y: Math.floor(Math.random() * 166) + wallMin\n    }\n  }\n  // draws the coin\n  draw () {\n    screen.fillStyle = colors.coin\n    screen.fillRect(this.center.x, this.center.y, this.size.x, this.size.y)\n  }\n  update () {\n  }\n}\n\n// creates the obstacle sprites and dictates how they act\nclass Obstacle {\n  constructor (game, pos, vel) {\n    this.game = game\n    this.velocity = vel\n    this.length = 166\n    this.center = pos\n    console.log(this)\n  }\n  draw () {\n    screen.fillStyle = colors.obstacles\n    screen.fillRect(this.center.x, this.center.y, 30, 30)\n  }\n  update () {\n    this.center.x += this.velocity.x\n    this.center.y += this.velocity.y\n    // console.log(this.center)\n  }\n}\n\n// collision detection function\nlet collide = function (sprite1, sprite2) {\n  return !(\n    sprite1 === sprite2 ||\n     sprite1.center.x + sprite1.size.x / 2 < sprite2.center.x - sprite2.size.x / 2 ||\n     sprite1.center.y + sprite1.size.y / 2 < sprite2.center.y - sprite2.size.y / 2 ||\n     sprite1.center.x - sprite1.size.x / 2 > sprite2.center.x + sprite2.size.x / 2 ||\n     sprite1.center.y - sprite1.size.y / 2 > sprite2.center.y + sprite2.size.y / 2\n  )\n}\n\n// function to grab element from DOM\nfunction getID (id) {\n  return document.getElementById(id)\n}\n\n// keyboard class that puts event listeners on key states\nclass Keyboarder {\n  constructor () {\n    this.keyState = {}\n\n    window.addEventListener('keydown', function (e) {\n      this.keyState[e.keyCode] = true\n    }.bind(this))\n\n    window.addEventListener('keyup', function (e) {\n      this.keyState[e.keyCode] = false\n    }.bind(this))\n  }\n\n  isDown (keyCode) {\n    return this.keyState[keyCode] === true\n  }\n\n  on (keyCode, callback) {\n    window.addEventListener('keydown', function (e) {\n      if (e.keyCode === keyCode) {\n        callback()\n      }\n    })\n  }\n}\n\n// keyboard input codes\nKeyboarder.KEYS = {\n  LEFT: 37,\n  RIGHT: 39,\n  UP: 38,\n  DOWN: 40,\n  S: 83\n}\n\n// starts game\nnew Game()\n\n// ** TODO\n// create an obstacle class\n// create a score that updates when player collects coin and when player collides with obstacle\n"]}